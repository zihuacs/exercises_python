{%- import "generator_macros.j2" as macros with context -%}
{{ macros.canonical_ref() }}

{{ macros.header()}}

{% macro test_case(case) -%}
    def test_{{ case["description"] | to_snake }}(self):
        {% set expected = case["expected"] -%}
        {% set exp_error = expected["error"] -%}
        {%- if case is error_case -%}
        with self.assertRaises(ValueError) as err:
            {{ case["property"] }}({{ case["input"]["number"] }})
        self.assertEqual(type(err.exception), ValueError)
        self.assertEqual(err.exception.args[0], "{{ exp_error }}")
        {%- else -%}
        self.assertEqual(
            {{ case["property"] }}({{ case["input"]["number"] }}),
            {{ case["expected"] }}
        )
        {% endif %}
{%- endmacro %}

class {{ exercise | camel_case }}Test(unittest.TestCase):
    {% for case in cases -%}
        {{ test_case(case) }}
    {% endfor %}
